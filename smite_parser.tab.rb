#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class SmiteParser < Racc::Parser

module_eval(<<'...end smite_parser.y/module_eval...', 'smite_parser.y', 206)
def parse(str)
  @q = SmiteLexer.lex!(str)
  do_parse
end

def next_token
  @q.shift
end

...end smite_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     7,    16,    28,    29,    30,    31,    12,    18,    19,    20,
    21,    22,    23,    24,    11,    13,    36,    42,    50,    44,
    14,    34,    35,    37,    38,    39,    36,    28,    29,    30,
    31,    34,    35,    37,    38,    39,    45,    46,    25,    15,
    49,    40,    52,    44,    54,    56,    57,    56 ]

racc_action_check = [
     0,     7,    13,    13,    13,    13,     0,     7,     7,     7,
     7,     7,     7,     7,     0,     0,    32,    16,    42,    16,
     0,    32,    32,    32,    32,    32,    14,    26,    26,    26,
    26,    14,    14,    14,    14,    14,    17,    18,    11,     1,
    35,    15,    44,    50,    51,    52,    54,    57 ]

racc_action_pointer = [
    -2,    39,   nil,   nil,   nil,   nil,   nil,    -2,   nil,   nil,
   nil,    36,   nil,   -16,     8,    41,    13,    27,    32,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,
   nil,   nil,    -2,   nil,   nil,    35,   nil,   nil,   nil,   nil,
   nil,   nil,    13,   nil,    34,   nil,   nil,   nil,   nil,   nil,
    37,    37,    40,   nil,    38,   nil,   nil,    42,   nil ]

racc_action_default = [
   -46,   -46,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
    -9,   -46,   -29,   -46,   -46,   -46,   -14,   -46,   -46,   -22,
   -23,   -24,   -25,   -26,   -27,   -28,   -30,   -32,   -33,   -34,
   -35,   -36,   -37,   -39,   -40,   -46,   -42,   -43,   -44,   -45,
    59,   -10,   -46,   -13,   -46,   -20,   -21,   -31,   -38,   -41,
   -12,   -15,   -19,   -11,   -46,   -17,   -18,   -19,   -16 ]

racc_goto_table = [
    43,    33,    27,    55,    41,     6,     8,     9,    58,    10,
     5,     4,    51,     3,    17,    47,    26,     2,    32,    48,
     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    53 ]

racc_goto_check = [
    11,    18,    16,    13,    10,     6,     7,     8,    13,     9,
     5,     4,    12,     3,    14,    16,    15,     2,    17,    18,
     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    11 ]

racc_goto_pointer = [
   nil,    20,    17,    13,    11,    10,     5,     6,     7,     9,
   -12,   -16,   -32,   -49,     7,     3,   -11,     4,   -13 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 29, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 31, :_reduce_6,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  3, 36, :_reduce_10,
  3, 38, :_reduce_11,
  2, 38, :_reduce_12,
  1, 38, :_reduce_none,
  0, 38, :_reduce_14,
  2, 39, :_reduce_15,
  4, 40, :_reduce_16,
  2, 40, :_reduce_17,
  1, 41, :_reduce_none,
  0, 41, :_reduce_19,
  3, 35, :_reduce_20,
  3, 35, :_reduce_21,
  2, 35, :_reduce_22,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  2, 37, :_reduce_28,
  1, 32, :_reduce_29,
  2, 33, :_reduce_30,
  2, 43, :_reduce_31,
  1, 43, :_reduce_none,
  1, 44, :_reduce_33,
  1, 44, :_reduce_34,
  1, 44, :_reduce_35,
  1, 44, :_reduce_36,
  2, 34, :_reduce_37,
  2, 45, :_reduce_38,
  1, 45, :_reduce_none,
  1, 46, :_reduce_40,
  2, 46, :_reduce_41,
  1, 46, :_reduce_42,
  1, 46, :_reduce_43,
  1, 46, :_reduce_44,
  1, 46, :_reduce_45 ]

racc_reduce_n = 46

racc_shift_n = 59

racc_token_table = {
  false => 0,
  :error => 1,
  :GOD => 2,
  :STATS => 3,
  :LEVEL => 4,
  :NUM => 5,
  :WITH => 6,
  "," => 7,
  :ITEM => 8,
  :ABILITY => 9,
  :PASSIVE => 10,
  :FIRST => 11,
  :SECOND => 12,
  :THIRD => 13,
  :FOURTH => 14,
  :FIFTH => 15,
  :RECOMMENDED => 16,
  :GODSEARCH => 17,
  :DMG_TYPE => 18,
  :ATK_RANGE => 19,
  :ROLE => 20,
  :PANTHEON => 21,
  :ITEMSEARCH => 22,
  :ITEM_EFFECT => 23,
  :TIER => 24,
  :AURA => 25,
  :STARTER => 26,
  :STACKING => 27 }

racc_nt_base = 28

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "GOD",
  "STATS",
  "LEVEL",
  "NUM",
  "WITH",
  "\",\"",
  "ITEM",
  "ABILITY",
  "PASSIVE",
  "FIRST",
  "SECOND",
  "THIRD",
  "FOURTH",
  "FIFTH",
  "RECOMMENDED",
  "GODSEARCH",
  "DMG_TYPE",
  "ATK_RANGE",
  "ROLE",
  "PANTHEON",
  "ITEMSEARCH",
  "ITEM_EFFECT",
  "TIER",
  "AURA",
  "STARTER",
  "STACKING",
  "$start",
  "target",
  "information",
  "god_info",
  "item_info",
  "god_search",
  "item_search",
  "god_ability",
  "god_stats",
  "god_items",
  "op_level_and_items",
  "with_items",
  "item_list",
  "op_stacks",
  "nth",
  "god_search_info",
  "search_god",
  "item_search_info",
  "search_item" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'smite_parser.y', 13)
  def _reduce_6(val, _values, result)
          result = Smite::Game.god(val[0])
    
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'smite_parser.y', 21)
  def _reduce_10(val, _values, result)
          result   = Smite::Game.god(val[0]).stats
      result   = result.at_level(val[2][:level])                    if val[2][:level]
      result   = result.with_items(val[2][:items], val[2][:stacks]) if val[2][:items]

      result
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 29)
  def _reduce_11(val, _values, result)
          result = { level: val[1] }.merge(val[2])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 32)
  def _reduce_12(val, _values, result)
          result = { level: val[1] }
    
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'smite_parser.y', 36)
  def _reduce_14(val, _values, result)
          result = {}
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 40)
  def _reduce_15(val, _values, result)
          stacks = val[1].each_with_object({}) do |(item, num_stacks), hash|
        hash[item.name.downcase] = num_stacks
      end
      items = val[1].map { |pair| pair[0] }

      result = { items: items , stacks: stacks }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 49)
  def _reduce_16(val, _values, result)
          result << [Smite::Game.item(val[2]), val[3]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 52)
  def _reduce_17(val, _values, result)
          result = [[Smite::Game.item(val[0]), val[1]]]
    
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'smite_parser.y', 57)
  def _reduce_19(val, _values, result)
          result = nil
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 62)
  def _reduce_20(val, _values, result)
          which = (val[1] - 1) % 5
      result = Smite::Game.god(val[0]).abilities[which]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 66)
  def _reduce_21(val, _values, result)
          which = (val[2] - 1) % 5
      result = Smite::Game.god(val[0]).abilities[which]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 70)
  def _reduce_22(val, _values, result)
          result = Smite::Game.god(val[0]).abilities[4]
    
    result
  end
.,.,

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'smite_parser.y', 77)
  def _reduce_28(val, _values, result)
          recommended_items = Smite::Game.god_recommended_items(val[1])[0].data
      result            = { 
        type: 'god_items',
        data: {
          god:     val[1],
          result:  recommended_items
        }
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 89)
  def _reduce_29(val, _values, result)
          result = Smite::Game.item(val[0])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 93)
  def _reduce_30(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 96)
  def _reduce_31(val, _values, result)
          query         = val[0][:data][:query] + ' ' + val[1][:data][:query]
      search_result = Set.new(val[0][:data][:result]) & Set.new(val[1][:data][:result])
      result = { type: 'godsearch', data: { query: query, result: search_result.to_a } }
    
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'smite_parser.y', 103)
  def _reduce_33(val, _values, result)
          filter = Smite::Game.gods.select do |g|
        val[0] =~ /phys/ ? g.physical? : g.magic?
      end
      result = {
        type: 'godsearch',
        data: { query:  val[0], result: filter }
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 112)
  def _reduce_34(val, _values, result)
          filter = Smite::Game.gods.select do |g|
        val[0] =~ /melee/ ? g.melee? : g.ranged?
      end
      result = {
        type: 'godsearch',
        data: { query:  val[0], result: filter }
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 121)
  def _reduce_35(val, _values, result)
          filter = Smite::Game.gods.select do |g|
        val[0].downcase == g.role.downcase
      end
      result = {
        type: 'godsearch',
        data: { query:  val[0], result: filter }
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 130)
  def _reduce_36(val, _values, result)
          filter = Smite::Game.gods.select do |g|
        val[0].downcase == g.pantheon.downcase
      end
      result = {
        type: 'godsearch',
        data: { query:  val[0], result: filter }
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 141)
  def _reduce_37(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 144)
  def _reduce_38(val, _values, result)
          query         = val[0][:data][:query] + ' ' + val[1][:data][:query]
      search_result = Set.new(val[0][:data][:result]) & Set.new(val[1][:data][:result])
      result = { type: 'itemsearch', data: { query: query, result: search_result.to_a } }
    
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'smite_parser.y', 151)
  def _reduce_40(val, _values, result)
          filter = Smite::Game.devices.select do |i|
        i.effects.map(&:attribute).any? do |eff|
          eff.tr('_', ' ') =~ /#{val[0]}/
        end
      end
      result = {
        type: 'itemsearch',
        data: { query:  val[0], result: filter }
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 162)
  def _reduce_41(val, _values, result)
          filter = Smite::Game.devices.select { |i| i.tier == val[1] }
      result = {
        type: 'itemsearch',
        data: { query:  val.join(' '), result: filter }
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 169)
  def _reduce_42(val, _values, result)
          filter = Smite::Game.devices.select do |i|
        val[0] =~ /magic/ ? i.magic? : i.physical?
      end
      result = {
        type: 'itemsearch',
        data: { query:  val[0], result: filter }
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 178)
  def _reduce_43(val, _values, result)
          filter = Smite::Game.devices.select(&:aura?)
      result = {
        type: 'itemsearch',
        data: { query:  val[0], result: filter }
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 185)
  def _reduce_44(val, _values, result)
          filter = Smite::Game.devices.select(&:starter?)
      result = {
        type: 'itemsearch',
        data: { query:  val[0], result: filter }
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'smite_parser.y', 192)
  def _reduce_45(val, _values, result)
          filter = Smite::Game.devices.select(&:stacking?)
      result = {
        type: 'itemsearch',
        data: { query:  val[0], result: filter }
      }
    
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SmiteParser

require 'set'
require 'smite'
require_relative './smite_lexer.rb'
